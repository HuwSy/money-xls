<!DOCTYPE html>
<html>
<head>
  <meta content="text/html;charset=utf-8" http-equiv="Content-Type">
  <meta content="utf-8" http-equiv="encoding">
  <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=1.0, maximum-scale=1.0"/>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <link rel="icon" type="image/x-icon" href="/money-xls/favicon.ico">
  <title>Money</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.16.7/xlsx.full.min.js" type="text/javascript"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js" type="text/javascript"></script>
  <script src="https://cdn.jsdelivr.net/npm/xlsx-calc@0.6.7/xlsx-calc.min.js" type="text/javascript"></script>
  <style type="text/css">
    body > div {
      width: 329px;
      margin: auto;
      background: white;
      padding: 0 10px;
      border: 1px solid #bbb;
      border-radius: 4px;
      box-shadow: 1px 1px #ccc;
      overflow: hidden;
    }
    body > div > * {
      margin-bottom: 10px
    }
    td {
      white-space: nowrap;
    }
  
    .tabs {
      width: 100%;
    }
    .tabs > div {
      margin-bottom: 6px
    }
    .tabs > div > label {
      width: 100%;
      display: flex;
      cursor: pointer;
      justify-content: space-between;
    }
    .tabs > div > label::after {
      content: "\276F";
      transform: rotate(90deg);
      transition: all 0.35s;
    }
    .tabs > div > input:checked + label::after {
      transform: translateX(-2px) rotate(270deg);
    }
    .tabs > div > div {
      max-height: 0;
      overflow: hidden;
      transition: all 0.35s;
    }
    .tabs > div > input:checked ~ div {
      max-height: initial;
      overflow: auto;
      margin-bottom: 18px
      padding-top: 10px;
      padding-bottom: 10px;
    }
  </style>
</head>
<body>
  <div>
    <p>All files are processed directly within your own browser and never online, view the code <a href="https://github.com/HuwSy/money-xls">here</a></p>
    
    <div id="top">
      Start:
      <input style="width:88px" type="date" onchange="StartChange(this.value)" id="start" name=start placeholder="Override start date">
      Today:
      <input style="width:88px" type="date" onchange="TodayChange(this.value)" id="today" name=today placeholder="Override todays date">
      <input type="file" style="display:none;" id="File" name=file onchange="FileChange(this)">
      <input id="Upload" name=upload onclick="Upload()" type="button" value="Load" style="float: right">
      <br style="clear:both;">
    </div>
    
    <div class="tabs">
      <div id="future" style="display:none">
        <input type=radio id=r1 style=display:none name=sheet>
        <label onclick="Checked(this.previousSibling)" for=r1>Spending</label>
        <div>
          <table id="upcoming">
            <tr></tr>
           </tr>
          </table>
          
          <table id="rows">
            <tr>
              <td><input name=cc type="checkbox" title="CC expense"></td>
              <td><input name=date type="date" style="width: 60px;"></td>
              <td><input name=amount type="number" step="0.01" size="10" style="width: 50px"></td>
              <td><input name=activity type="text" placeholder="Activity" style="width: 70px"></td>
              <td><input name=add type="button" value="+" onclick="NewRow(this.parentNode.parentNode)"></td>
              <td><input name=remove type="button" value="-" onclick="DelRow(this.parentNode.parentNode)"></td>
           </tr>
          </table>
          <input name=include style=float:right type="button" value="Inc." onclick="IncludeSpent()">
          <br style=clear:both;>
          
          <hr>
          <textarea id="D3" name=d3 style="width:95%" rows=3></textarea><br>
          <input id="E3" name=e3 type="number" step="0.01" size="15" style="width: 100px">
          <input id=Sum name=sum type=number size=15 style="width: 100px" disabled>
          <input name=update style=float:right type="button" value="Upd." onclick="UpdateCC()">
          <br style=clear:both;>
          
          <hr>
          <table id="spent">
          </table>
        </div>
      </div>
      <div id="over" style="display:none">
        <input type=radio id=r6 style=display:none name=sheet>
        <label onclick="Checked(this.previousSibling)" for=r6>Futures</label>
        <div>
          <table>
          </table>
        </div>
      </div>
      <div id="options" style="display:none">
        <input type=radio id=r5 style=display:none name=sheet>
        <label onclick="Checked(this.previousSibling)" for=r5>Tasks</label>
        <div>
          <table id="plans" style="display:none">
            <tr>
              <td><input name=year type=number style=width:34px placeholder=Years></td>
              <td><input name=month type=number style=width:38px placeholder=Months></td>
              <td><input name=day type=number style=width:38px placeholder=Days></td>
              <td><input name=end type="date" style=width:96px placeholder=End></td>
              <td><input name=start type="date" style=width:96px placeholder=Start></td>
              <td><input name=cost type=number style=width:56px><input type=button value=T onclick="this.previousSibling.type=this.previousSibling.type=='number'?'text':'number'"</td>
              <td><input name=title type=text style=width:120px></td>
              <td><input name=f type=number style=width:34px placeholder=FNumber></td>
              <td><input name=new type="button" value="+" onclick="NewRow(this.parentNode.parentNode)"></td>
              <td><input name=rem type="button" value="-" onclick="DelRow(this.parentNode.parentNode)"></td>
            </tr>
          </table>
          <input type="button" value="Load" onclick="PopulatePlan(this)">
          <input type="button" value="Save" onclick="SavePlan(this)" style="display:none">
          <br style=clear:both;><br>
          
          <input type="button" onclick=RunAll() value="Run All"><br><br>
          
          <input type="button" onclick=SetupOneYear() value="One Year">
          <input type="button" onclick=SetupLimited() value="F1-9">
          <input type="button" onclick=SetupAllYears() value="All Years"><br><br>
          
          <input type="button" onclick=Saving() value="Save"><br>
        </div>
      </div>
    </div>

    <div id="output">
    </div>
  </div>
  
  <script type="text/javascript">
    function Checked(ths) {
      if (ths.parentNode.children[0].checked) {
        ths.parentNode.children[0].checked = false;
        event.preventDefault();
      }
      setTimeout(function() {
        document.getElementsByTagName('p')[0].scrollIntoView({ block: 'end',  behavior: 'smooth' });
      },500);
    }
    
    var rows = document.getElementById("rows").getElementsByTagName('tr');
    var upcoming = document.getElementById("upcoming").getElementsByTagName('tr');
    var plans = document.getElementById("plans").getElementsByTagName('tr');

    function rename(t, k) {
      t.name = t.name.replace(/[0-9]*/g,'') + k;
    }
    
    function NewRow(ths) {
      var m = ths.parentNode.getAttribute('max')?.toString();
      if (!m)
        m = '0';
      var k = parseInt(m) + 1;
      ths.parentNode.setAttribute('max', k);
      
      var row = ths.cloneNode(true);
      rename(row.children[0].children[0], k);
      rename(row.children[1].children[0], k);
      rename(row.children[2].children[0], k);
      rename(row.children[3].children[0], k);
      rename(row.children[4].children[0], k);
      rename(row.children[5].children[0], k);
      if (row.children[0].children[0].type == "checkbox") {
        row.children[0].children[0].checked = null;
      } else {
        rename(row.children[5].children[1], k);
        rename(row.children[6].children[0], k);
        rename(row.children[7].children[0], k);
        rename(row.children[8].children[0], k);
        rename(row.children[9].children[0], k);
        row.children[0].children[0].value = null;
        row.children[4].children[0].value = null;
        row.children[5].children[0].value = null;
        row.children[6].children[0].value = null;
        row.children[7].children[0].value = null;
      }
      row.children[1].children[0].value = null;
      row.children[2].children[0].value = null;
      row.children[3].children[0].value = null;
      ths.before(row);
    }

    function DelRow(ths) {
      try {
        if (ths.parentNode.children.length == 1)
          NewRow(ths);
        ths.parentNode.removeChild(ths);
      } catch {}
    }

    function clearRows(ths) {
      while (ths.length > 1) {
        DelRow(ths[0]);
      }
      DelRow(ths[0]);
    }

    async function IncludeSpent() {
      document.getElementById('output').innerHTML += ('Including<br>');
      await timeout();
      
      await setupSpentFields();
      await timeout();

      document.getElementById('output').innerHTML += ('...cleaning<br>');
      await timeout();
      
      for (let n = rows.length - 1; n >= 0; n--) {
        let row = rows[n];
        try {
          if (!row.children[2].children[0].value)
            DelRow(row);
        } catch (e) {
          DelRow(row);
        }
      }

      document.getElementById('output').innerHTML += ('...moving sums<br>');
      await timeout();
      
      var spent = Spent.getRange("A4:Z" + Spent.getMaxRows()).getValues();
      var r = rows.length - 1;
      var m = 0;

      if (r == 0 && !rows[r].children[2].children[0].value)
        return;

      var cc = Spent.getRange("D3:D3").getFormula().split("D");
      var a = "="+cc[0];
      for (let i = 1; i < cc.length; i++)
        a += "D" + (parseInt(cc[i])+1+r) + cc[i].replace(/^[0-9]+/,'');
      
      document.getElementById('output').innerHTML += ('...inserting<br>');
      await timeout();
      
      for (let n = r; n >= 0; n--) {
        let row = rows[n];
        let v = (typeof row.children[1].children[0].value == "string" ? row.children[1].children[0].value : row.children[1].children[0].value.toISOString().substring(0, 10)).split('-')

        for (var p = 0; p < spent.length; p++)
          if (new Date(spent[p][0], spent[p][1]-1, spent[p][2]) <= new Date(v[0], v[1]-1, v[2]))
              break;
        
        if (row.children[0].children[0].checked)
          a += "-D"+(4+n+p);

        if (4+n+p > m)
          m = 4+n+p;
        
        spent.splice(p, 0, [
          parseInt(v[0]),
          parseInt(v[1]),
          parseInt(v[2]),
          parseFloat(row.children[2].children[0].value),
          row.children[3].children[0].value
        ]);
        
        DelRow(row);
      }

      document.getElementById('output').innerHTML += ('...setting formulas<br>');
      await timeout();
      
      for (; m >= 4; m--)
        Spent.getRange("F" + m + ":F" + m).setFormula("");

      Spent.getRange("A4:Z" + (3+spent.length)).setValues(spent);
      
      Spent.getRange("D3:D3").setFormula(a);
      Spent.getRange("D2:D2").setFormula("=SUM(D3:D"+(3+spent.length)+")-D1+E3");

      var top = Spent.getRange("F2:Z2").getFormulasR1C1();
      for (let i = 0; i < top[0].length; i++) {
        try {
          let m = top[0][i].match(/\:([A-Za-z])([0-9]+)/);
          top[0][i] = top[0][i].replace(m[0], ":"+m[1]+(parseInt(m[2])+1+r));
        } catch (e) {}
      }
      Spent.getRange("F2:Z2").setFormulasR1C1(top);

      document.getElementById('output').innerHTML += ('...calc<br>');
      await timeout()
      
      calc(0);
      await populateSpent(true);
      
      document.getElementById('output').innerHTML += ('...done<br>');
    }

    async function populateSpent(incFuture) {
      clearRows(plans);
      
      await setupSpentFields();
      await timeout();
      
      document.getElementById('output').innerHTML += ('...setting current<br>');
      await timeout();
      
      var template = `
        <tr>
          <td style=width:22px>{5}</td>
          <td style=width:96px>{0}</td>
          <td style="color: {4}">{1}</td>
          <td {6}>{2}</td>
        </tr>
          `;
      
      var s = document.getElementById('spent');

      var current = Spent.getRange("D1:E3").getValues();
      s.innerHTML = template
        .replace('{5}','')
        .replace('{0}','')
        .replace('{1}',current[0][0].toLocaleString("en-GB", {style:"currency", currency:"GBP"}))
        .replace('{2}',current[0][1])
        .replace('{4}',current[0][0]<0?'red':'inherited');
      s.innerHTML += template
        .replace('{5}','')
        .replace('{0}','')
        .replace('{1}',current[1][0].toLocaleString("en-GB", {style:"currency", currency:"GBP"}))
        .replace('{2}',current[1][1])
        .replace('{4}',current[1][0]<0?'red':'inherited');
      s.innerHTML += template
        .replace('{5}','')
        .replace('{0}','')
        .replace('{1}',current[2][0].toLocaleString("en-GB", {style:"currency", currency:"GBP"}))
        .replace('{2}',current[2][1].toLocaleString("en-GB", {style:"currency", currency:"GBP"}))
        .replace('{4}','inherited');
      s.innerHTML += "<tr><td colspan=9><hr></td></tr>";
      
      document.getElementById('output').innerHTML += ('...setting spents<br>');
      await timeout();
      
      var spent = Spent.getRange("A4:E99").getValues();
      for (let i in spent)
        if (spent[i][3] !== null && spent[i][3] !== '')
          s.innerHTML += template
            .replace('{5}',parseInt(i)+4)
            .replace('{0}',!spent[i][2] ? '' : !spent[i][0] ? spent[i][2] : `${spent[i][0]}-${(spent[i][1] < 10 ? "0" : "")+spent[i][1]}-${(spent[i][2] < 10 ? "0" : "")+spent[i][2]}`)
            .replace('{1}',`${(spent[i][3] || 0).toLocaleString("en-GB", {style:"currency", currency:"GBP"})}`)
            .replace('{2}',`${spent[i][4]}`)
            .replace('{4}',spent[i][3]<0?'red':'inherited');

      document.getElementById('output').innerHTML += ('...setting over<br>');
      await timeout();
      
      var o = document.getElementById('over').getElementsByTagName('table')[0];
      
      o.innerHTML = template
        .replace('{5}','Y-M')
        .replace('{0}','Under')
        .replace('{1}','Annual')
        .replace('{2}','Low')
        .replace('{4}','inherited')
      
      var over = Over.getRange("A2:J99").getValues();
      for (let i in over)
        if (over[i][0])
          o.innerHTML += template
            .replace('{5}',over[i][0]+"-"+over[i][1])
            .replace('{0}',!over[i][5]?'':over[i][5].toLocaleString("en-GB", {style:"currency", currency:"GBP"}))
            .replace('{1}',!over[i][8]?'':over[i][8].toLocaleString("en-GB", {style:"currency", currency:"GBP"}))
            .replace('{2}',!over[i][9]?'':over[i][9].toLocaleString("en-GB", {style:"currency", currency:"GBP"}))
            .replace('{4}',over[i][8]<0?'red':'inherited');

      document.getElementById('output').innerHTML += ('...setting future<br>');
      await timeout();
      
      clearRows(rows);
      clearRows(upcoming);
      
      var future = !incFuture ? [] : Future.getRange("A2:E" + Future.getMaxRows()).getValues()
      var next = new Date(today);
      //next.setDate(next.getDate()+1+(next.getDay()==5?1:0));
      next.setHours(13);
      var last = new Date(year+10,0,0);
      
      var c = 10;
      var foundBlank = false;
      for (let f = 0; f < future.length; f++) {
        if ((future[f][4] || "") == "")
          foundBlank = true;
        else if (foundBlank) {
          let d = new Date(future[f][0],future[f][1]-1,future[f][2]);
          d.setHours(12);

          if (d > last)
            break;
          
          if (d <= next) {
            rows[0].children[1].children[0].value = d.toISOString().substring(0, 10);
            rows[0].children[2].children[0].value = future[f][3] ? future[f][3].toFixed(2) : 0;
            rows[0].children[3].children[0].value = future[f][4];

            NewRow(rows[0]);
          } else {
            let tr = document.createElement('tr');
            tr.innerHTML = template.replace('<tr>','').replace('</tr>','')
              .replace('{5}', '')
              .replace('{0}', d.toISOString().substring(0, 10))
              .replace('{1}', (future[f][3] || 0).toLocaleString("en-GB", {style:"currency", currency:"GBP"}))
              .replace('{2}', future[f][4])
              .replace('{6}', 'colspan=3 style=overflow:hidden;max-width:150px;')
              .replace('{4}', future[f][3]<0?'red':'inherited')
            upcoming[0].before(tr);
            
            c--;
            if (c == 0) {
              last = d;
            }
          }
        }
      }

      future = !incFuture || !workbook.Sheets['F1'] ? [] : workbook.Sheets['F1'].getRange("A2:E" + workbook.Sheets['F1'].getMaxRows()).getValues();
      next.setMonth(next.getMonth()+1);
      
      var foundBlank = false;
      for (let f = 0; f < future.length; f++) {
        if ((future[f][4] || "") == "")
          foundBlank = true;
        else if (foundBlank) {
          let d = new Date(future[f][0],future[f][1]-1,future[f][2]);
          d.setHours(12);

          if (d > next) {
            break;
          }

          if (d > last) {
            let tr = document.createElement('tr');
            tr.innerHTML = template.replace('<tr>','').replace('</tr>','')
              .replace('{5}', '')
              .replace('{0}', d.toISOString().substring(0, 10))
              .replace('{1}', (future[f][3] || 0).toLocaleString("en-GB", {style:"currency", currency:"GBP"}))
              .replace('{2}', future[f][4])
              .replace('{6}', 'colspan=3 style=overflow:hidden;max-width:150px;')
              .replace('{4}', future[f][3]<0?'red':'inherited')
            upcoming[0].before(tr);
          }
        }
      }

      document.getElementById('output').innerHTML += ('...setting formulas<br>');
      await timeout();
      
      document.getElementById('D3').value = Spent.getRange("D3:D3").getFormula();
      document.getElementById('E3').value = Spent.getRange("E3:E3").getValue();
      document.getElementById('Sum').value = parseFloat(Spent.getRange("E3:E3").getValue()) + parseFloat(Spent.getRange("D3:D3").getValue());
    }

    async function PopulatePlan(ths) {
      document.getElementById('output').innerHTML += ('Getting plans<br>');
      await timeout();

      document.getElementById("plans").style.display = 'block';
      ths.nextElementSibling.style.display = 'block';
      ths.style.display = 'none';
      
      var plan = Plan.getRange("A2:L" + Plan.getMaxRows()).getValues();
      var planf = Plan.getRange("J2:J" + (plan.length + 1)).getFormulasR1C1();
      for (let p = plan.length - 1; p >= 0; p--) {
        plans[0].children[0].children[0].value = plan[p][0];
        plans[0].children[1].children[0].value = plan[p][1];
        plans[0].children[2].children[0].value = plan[p][2];
        if (plan[p][3] > 1900) {
          let s = new Date(plan[p][3],plan[p][4]-1,plan[p][5]);
          s.setHours(12);
          plans[0].children[3].children[0].value = s.toISOString().substring(0, 10);
        }
        if (plan[p][6] > 1900) {
          let e = new Date(plan[p][6],plan[p][7]-1,plan[p][8]);
          e.setHours(12);
          plans[0].children[4].children[0].value = e.toISOString().substring(0, 10);
        }
        plans[0].children[5].children[0].type = "number";
        plans[0].children[5].children[0].value = plan[p][9];
        if ((planf[p][0] || "") != "") {
          plans[0].children[5].children[0].type = "text";
          plans[0].children[5].children[0].value = "="+planf[p][0];
        }
        plans[0].children[6].children[0].value = plan[p][10];
        plans[0].children[7].children[0].value = plan[p][11];

        if (p > 0)
          NewRow(plans[0]);
      }

      document.getElementById('output').innerHTML += ('...done<br>');
      await timeout();
    }

    async function SavePlan(ths) {
      if (plans.length == 1 && !row.children[5].children[0].value)
        return;

      document.getElementById('output').innerHTML += ('Planning<br>');
      
      document.getElementById("plans").style.display = 'none';
      ths.previousElementSibling.style.display = 'block';
      ths.style.display = 'none';
      
      var plan = [];
      for (let n = 0; n < plans.length; n++) {
        let row = plans[n];

        let s = !row.children[3].children[0].value ? [null,null,null] : (typeof row.children[3].children[0].value == "string" ? row.children[3].children[0].value : row.children[3].children[0].value.toISOString().substring(0, 10)).split('-')
        let e = !row.children[4].children[0].value ? [null,null,null] : (typeof row.children[4].children[0].value == "string" ? row.children[4].children[0].value : row.children[4].children[0].value.toISOString().substring(0, 10)).split('-')

        plan.push([
          !row.children[0].children[0].value ? null : parseInt(row.children[0].children[0].value),
          !row.children[1].children[0].value ? null : parseInt(row.children[1].children[0].value),
          !row.children[2].children[0].value ? null : parseInt(row.children[2].children[0].value),
          s[2] ? parseInt(s[0]) : null,
          parseInt(s[1]),
          parseInt(s[2]),
          e[2] ? parseInt(e[0]) : null,
          parseInt(e[1]),
          parseInt(e[2]),
          row.children[5].children[0].type == "number"
            ? parseFloat(row.children[5].children[0].value || '0')
            : null,
          row.children[6].children[0].value,
          row.children[7].children[0].value === null || row.children[7].children[0].value === '' ? null : parseInt(row.children[7].children[0].value)
        ]);
      }

      Plan.getRange("A2:L" + Plan.getMaxRows()).clear();
      Plan.getRange("A2:L" + (plan.length + 1)).setValues(plan);

      document.getElementById('output').innerHTML += ('...formulas<br>');
      await timeout();
      
      var formulas = Plan.getRange("M2:O2").getFormulasR1C1()[0];
      for (let n = 0; n < plans.length; n++) {
        let row = plans[n];

        if (row.children[5].children[0].type == "text")
          Plan.getRange("J"+(n+2)+":J"+(n+2)).setFormulasR1C1([[row.children[5].children[0].value]]);

        let f = [];
        f[0] = formulas[0].replace(/([A-Za-z]+)2/g, '$1'+(n+2));
        f[1] = formulas[1].replace(/([A-Za-z]+)2/g, '$1'+(n+2));
        f[2] = formulas[2].replace(/([A-Za-z]+)2/g, '$1'+(n+2));

        Plan.getRange("M"+(n+2)+":O"+(n+2)).setFormulasR1C1([f]);
      }

      document.getElementById('output').innerHTML += ('...calc<br>');
      await timeout()
      
      calc(0);
      await populateSpent(true);
      
      document.getElementById('output').innerHTML += ('...done<br>');
    }

    async function UpdateCC() {
      document.getElementById('output').innerHTML += ('Overwriting<br>');
      await timeout();
      
      Spent.getRange("D3:D3").setFormula(document.getElementById('D3').value);
      Spent.getRange("E3:E3").setValue(parseFloat(document.getElementById('E3').value));
      
      document.getElementById('output').innerHTML += ('...calc<br>');
      await timeout()
      
      calc(0);
      await populateSpent(true);
      
      document.getElementById('output').innerHTML += ('...done<br>');
    }

    var workbook = null;
    var Spent,Future,Over,Plan;
    // encode due to xlsx issues
    var pound = decodeURIComponent("%C2%A3");
    
    // get overrideable min 1 year history based on april start
    var begining = new Date();
    begining.setFullYear(begining.getFullYear() - (begining.getMonth() >= 3 ? 1 : 2));
    // if currently april use jan start for more average data/history
    begining.setDate(1);
    begining.setMonth(begining.getMonth() == 3 ? 0 : 3);
    document.getElementById('start').value = begining.toJSON().substring(0,10);
    
    // get overrideable today point
    var today = new Date();
    document.getElementById('today').value = today.toJSON().substring(0,10);
    
    // get year end name
    var year = today.getFullYear() + (today.getMonth()+1 >= begining.getMonth() + 1 ? 1 : 0);
    
    // on start changed
    function StartChange(ths) {
      if (ths == null || ths == "")
        begining = new Date(2011, 3, 1);
      else {
        var val = typeof ths == "string" ? ths : ths.toISOString();
        begining = new Date(val.substring(0,4),parseInt(val.substring(5,7))-1,val.substring(8,10),12,0,0);
      }
      year = today.getFullYear() + (today.getMonth()+1 >= begining.getMonth() + 1 ? 1 : 0);
    }

    // on today changed
    function TodayChange(ths) {
      if (ths == null || ths == "")
        today = new Date();
      else {
        var val = typeof ths == "string" ? ths : ths.toISOString();
        today = new Date(val.substring(0,4),parseInt(val.substring(5,7))-1,val.substring(8,10),12,0,0);
      }
      year = today.getFullYear() + (today.getMonth()+1 >= begining.getMonth() + 1 ? 1 : 0);
    }
    
    // on upload clicked
    function Upload () {
      document.getElementById('File').value = null;
      document.getElementById('File').click();
    }

    // on file changed, load binary
    async function FileChange (ths) {
      if (ths.files.length != 1)
        return;
      
      document.getElementById('output').innerHTML = ('Loading...<br>');
      
      document.getElementById('future').style.display = "none";
      document.getElementById('over').style.display = "none";
      document.getElementById('options').style.display = "none";
      
      await timeout()
      var f = ths.files[0];
      window.name = f.name;

      var reader = new window.FileReader();
      reader.onerror = function () {
        alert("File reading error " + f.name);
      };
      reader.onload = fileLoaded
      reader.readAsBinaryString(f);
    }
    
    async function RunAll() {
      await SetupOneYear();
      await timeout();
      
      await SetupLimited();
      await timeout();
      
      await SetupAllYears();
      await timeout();

      await populateSpent(true);
      await timeout();
      
      await Saving();
    }

    async function setupSpentFields() {
      document.getElementById('output').innerHTML += ('...sorting<br>');
      await timeout()
      
      // order plan sheet
      Plan.getRange("A2:O" + Plan.getMaxRows()).sort([{column: 13, ascending: true}, {column: 14, ascending: true}, {column: 7, ascending: true}, {column: 8, ascending: true}, {column: 9, ascending: true}]);

      document.getElementById('output').innerHTML += ('...blanks<br>');
      await timeout()
      
      // find blank year or calcs in spent to copy top row into
      var row = 4;
      while (Spent.getRange("A" + row + ":A" + row).getValue() == "") {
        row++;
      }
     
      while ((Spent.getRange("F" + row + ":F" + row).getFormula() ?? "") == "" && Spent.getRange("F" + row + ":F" + row).getValue() == "" && row < Spent.getMaxRows()) {
        row++;
      }
      
      // get latest date below blanks
      var last = Spent.getRange("A" + row + ":C" + row).getValues();
     
      // set dates correctlt
      var daterow = row - 1;
      while (daterow >= 4) {
        var y = last[0][0];
        var m = last[0][1];
        var d = Spent.getRange("C" + daterow + ":C" + daterow).getValue();
        
        // new month
        if (d < last[0][2]) {
          m++;
          if (m > 12) {
            m = 1;
            y++;
          }
        }
        
        if (new Date(y, m - 1, d) <= today) {
          Spent.getRange("A" + daterow + ":A" + daterow).setValue(y);
          Spent.getRange("B" + daterow + ":B" + daterow).setValue(m);
        } else {
          break;
        }
        
        daterow--;
      }
     
      // set formulas side
      var sumrow = row - 1;
      var sum = Spent.getRange("F3:Z3").getFormulasR1C1();
      while (sumrow >= 4 && sumrow > daterow) {
        Spent.getRange("F" + sumrow + ":Z" + sumrow).setFormulasR1C1(sum);
        sumrow--;
      }
    }

    async function SetupOneYear() {
      document.getElementById('output').innerHTML += ('One year...<br>');
      
      document.getElementById('output').innerHTML += ('...clearing<br>');
      await timeout()
      
      // blank over sheet and recalc
      var r = ((year - begining.getFullYear()-1)*12) + 2;
      Over.getRange("H" + r + ":L" + (r + 11)).setFormula("=0");
      Over.getRange("L" + r + ":L" + r).setFormula("=0");

      document.getElementById('output').innerHTML += ('...calc<br>');
      await timeout()
      
      calc(1);
      
      await timeout()
      futureYear(0);
      document.getElementById('output').innerHTML += ('...overspent<br>');
      await timeout()
      overSpent();
      document.getElementById('output').innerHTML += ('...forecasting<br>');
      await timeout()
      overYearly();
      document.getElementById('output').innerHTML += ('...calc<br>');
      await timeout()
      calc(2);
      document.getElementById('output').innerHTML += ('...done<br>');
    }

    async function SetupLimited() {
      document.getElementById('output').innerHTML += ('F');
      
      // calc any Fn sheets if they exist, ie F3 using plan items with values <= 3
      for (var priority = 1; priority <= 9; priority++) {
        Future = workbook.Sheets["F" + priority];
        if (typeof Future == "undefined" || Future == null)
          continue;
        
        document.getElementById('output').innerHTML += (priority + "...");
        await timeout()
        futureYear(1, priority);
        nowData(priority);
      }
      document.getElementById('output').innerHTML += ('<br>');

      Future = workbook.Sheets['Future'];
      document.getElementById('output').innerHTML += ('...calc<br>');
      await timeout()
      calc(3);
      document.getElementById('output').innerHTML += ('...done<br>');
    }

    async function SetupAllYears() {
      document.getElementById('output').innerHTML += ('All years...<br>');
      await timeout()
      var len = Spent.getRange("G1:G1").getValue();
      futureYear(len);
      document.getElementById('output').innerHTML += ('...overspent<br>');
      await timeout()
      overSpent();
      document.getElementById('output').innerHTML += ('...forecasting<br>');
      await timeout()
      overYearly();
      document.getElementById('output').innerHTML += ('...breakdown<br>');
      await timeout()
      nowData();
      document.getElementById('output').innerHTML += ('...calc<br>');
      await timeout()
      calc(4);
      document.getElementById('output').innerHTML += ('...done<br>');
    }

    async function Saving() {
      document.getElementById('output').innerHTML += ('Saving...<br>');
      await timeout()
      
      // formatting
      var currentCols = [];
      currentCols[0] = {width: 45/7};
      currentCols[1] = {width: 25/7};
      currentCols[2] = {width: 25/7};
      currentCols[3] = {width: 100/7};
      currentCols[4] = {width: 175/7};
      currentCols[5] = {width: 100/7};
      currentCols[6] = {width: 25/7};
      var headings = Spent.getRange("H1:X1").getValues();
      for (var heading = 0; heading < 17; heading++)
        currentCols.push((headings[0][heading] || '') == '' ? {width: 25/7} : {width: 85/7});
      currentCols[24] = {width: 100/7};
      currentCols[25] = {width: 100/7};
      
      Spent['!cols'] = currentCols;
      Spent.fixHeight(1, Spent.getMaxRows());
      
      Plan['!cols'] = [{width: 25/7},{width: 25/7},{width: 25/7},{width: 45/7},{width: 25/7},{width: 25/7},{width: 45/7},{width: 25/7},{width: 25/7},{width: 100/7},{width: 175/7},{width: 25/7},{width: 125/7},{width: 125/7},{width: 100/7}];
      Plan.fixHeight(1, Plan.getMaxRows());
      
      for (var priority = 9; priority >= 0; priority--) {
        Future = workbook.Sheets[priority > 0 ? "F" + priority : "Future"];
        if (typeof Future == "undefined" || Future == null)
          continue;
        Future['!cols'] = [{width: 45/7},{width: 25/7},{width: 25/7},{width: 100/7},{width: 175/7},{width: 100/7},{width: 100/7}];
      }
      Over['!cols'] = [{width: 45/7},{width: 25/7},{width: 100/7},{width: 100/7},{width: 100/7},{width: 100/7},{width: 25/7},{width: 100/7},{width: 100/7},{width: 100/7},{width: 60/7},{width: 60/7}];
      
      Spent.getRange("B1:C1").setNumberFormat("00");
      Spent.getRange("D1:D1").setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
      Spent.getRange("E3:E3").setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
      
      var mRows = Spent.getMaxRows();
      for (var m = 2; m < mRows; m++) {
        try {
          Spent.getRange("B" + m + ":C" +m).setNumberFormat("00");
        } catch (e) {}
        try {
          Spent.getRange("D" + m + ":D" + m).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
        } catch (e) {}
        try {
          Spent.getRange("F" + m + ":Z" + m).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
        } catch (e) {}
      }

      Plan.getRange("A2:I" + Plan.getMaxRows()).setNumberFormat("00");
      mRows = Plan.getMaxRows();
      for (var m = 1; m < mRows; m++) {
        try {
          Plan.getRange("J" + m + ":J" + m).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
        } catch (e) {}
        try {
          Plan.getRange("M" + m + ":N" + m).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
        } catch (e) {}
      }
      
      document.getElementById('output').innerHTML += ('...outputting<br>');
      await timeout()
      
      // saving buffer
      function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
          return buf;
      }

      // saving xlsx
      var wb = XLSX.write(workbook, {bookType:'xlsx',cellStyles:true,compression:true,type:'binary'});//base64
      var buf = s2ab(wb);
      var blob = new Blob([buf],{type:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", charset: "UTF-8", name: name});
      
      // downloading
      var aElement = document.createElement('a');
      aElement.innerHTML = name;
      aElement.download = name;
      aElement.setAttribute('download', name);
      aElement.href = window.URL.createObjectURL(blob);//`data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,${wb}`;
      aElement.target = "_blank";
      
      document.getElementById('output').innerHTML += ('...done<br>');
      
      document.getElementById('output').appendChild(aElement);
      document.getElementById('output').innerHTML += ('<br>');
      aElement.click();
    }

    async function fileLoaded (e) {
      // loading xlsx
      workbook = null, Spent = null, Future = null, Over = null, Plan = null;
      workbook = XLSX.read(e.target.result, {type: 'binary',cellStyles:false});
      document.getElementById('output').innerHTML += ('...loaded ' + workbook.SheetNames.length + ' sheets<br>');
      await timeout()

      // sheet functions to mimic gs
      workbook.SheetNames.forEach(sheetConfig);
      
      // sheets
      Spent = workbook.Sheets['Spent'];
      Future = workbook.Sheets['Future'];
      Over = workbook.Sheets['Over'];
      Plan = workbook.Sheets['Plan'];
      
      document.getElementById('future').style.display = "block";
      document.getElementById('over').style.display = "block";
      document.getElementById('options').style.display = "block";

      await populateSpent(true);
      
      document.getElementById('output').innerHTML += ('Ready...<br>');
    }

    function futureYear(len, priority) {
      // how much data we will store
      var EndDate = new Date(year + len, begining.getMonth() + 1-1, 1);
      var NotBefore = new Date(begining.toJSON().substring(0,10));
      if (len <= 0)
        NotBefore = new Date(year - 1, begining.getMonth() + 1-1, 1);
      if (NotBefore < begining)
        NotBefore = begining;

      var future = [];
      var plan = Plan.getRange("A2:L" + Plan.getMaxRows()).getValues();

      // loop all planned items
      for (p = 0; p < plan.length; p++) {
        // if limited skip lower priority
        if ((priority == null && plan[p][11] == "-1")
            || (priority != null && plan[p][11] > priority))
          continue;
        
        // if there is start date and details
        if (plan[p][6] != "" && plan[p][7] != "" && plan[p][8] != "" && plan[p][10] != "") {
          var t = new Date(plan[p][6], plan[p][7]-1, plan[p][8]);
          if (t >= EndDate) continue;
          var c = plan[p][11] == "-1" ? "" : plan[p][9];
          var n = plan[p][11] == "-1" ? "" : plan[p][10];
          
          var ay = plan[p][0];
          if (ay == '') ay = 0;
          var am = plan[p][1];
          if (am == '') am = 0;
          var ad = plan[p][2];
          if (ad == '') ad = 0;
          
          var e = EndDate;
        
          // get end date if exists
          if (plan[p][3] != "" && plan[p][4] != "" && plan[p][5] != "") {
            e = new Date(plan[p][3], plan[p][4]-1, plan[p][5]);
          }
        
          // if no repeat use current date
          if (ay+am+ad <= 0) {
            e = t;
          }
        
          // override end date with EndDate
          if (e > EndDate) {
            e = EndDate;
          }
     
          // speed up one year calc or shorrter beginning dates
          if (NotBefore != null) {
            if (e < NotBefore || (e.toUTCString() == NotBefore.toUTCString() && ay + am + ad > 0))
              continue;
            
            if (ay + am + ad > 0)
              while (t < NotBefore) {
                t = new Date(t.getFullYear() + ay, t.getMonth() + am, t.getDate() + ad);
              }
            
            if (t >= EndDate)
              continue;
          }
        
          if (t > e || (t.toUTCString() == e.toUTCString() && ay + am + ad > 0))
            continue;
        
          // populate future and loop until end date
          do {
            var f = future.length;
            future[f] = [];
            future[f][0] = t.getFullYear();
            future[f][1] = t.getMonth() + 1;
            future[f][2] = t.getDate();
            future[f][3] = c;
            future[f][4] = n;

            t = new Date(t.getFullYear() + ay, t.getMonth() + am, t.getDate() + ad);
          } while (t < e);
        }
      }

      future.sort(function (a,b) {
        if (a[0] == b[0] && a[1] == b[1])
          return a[2] - b[2];
        if (a[0] == b[0])
          return a[1] - b[1];
        return a[0] - b[0];  
      });

      Future.showRows(2,Future.getMaxRows());
      Future.getRange("A2:G" + Future.getMaxRows()).clear();
      Future.getRange("A2:E" + (future.length + 1)).setValues(future);
      
      Future.getRange("A2:C" + Future.getMaxRows()).setNumberFormat("00");
      Future.getRange("D2:D" + Future.getMaxRows()).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
    }

    function overSpent() {
      var spent = Spent.getRange("A4:F" + Spent.getMaxRows()).getValues();
      var future = Future.getRange("A2:E" + Future.getMaxRows()).getValues();
     
      var over = [];
      // loop future output
      for (var f = 0; f < future.length;) {
        var cc = future[f++];
        // if data exists
        if (cc[0] != "" && cc[1] != "" && cc[2] != "" && new Date(cc[0], cc[1]-1, cc[2]) <= today) {
          // create over row
          var o = over.length;
          over[o] = [];
          over[o][0] = cc[0];
          over[o][1] = cc[1];
          over[o][2] = 0.0; // spent scheet col d
          over[o][3] = 0.0; // spent f
          over[o][4] = parseFloat(cc[3] || 0);
          over[o][5] = 0.0; // [2] - [3] - [4]
          
          // loop future summing into [4]
          while (f < future.length && future[f][0] == cc[0] && future[f][1] == cc[1] && new Date(future[f][0], future[f][1]-1, future[f][2]) <= today) {
            over[o][4] += parseFloat(future[f++][3] || 0);
          }

          // find end of spent for this over row
          var s = spent.length - 1;
          while (s >= 0 && (spent[s][0] != cc[0] || spent[s][1] != cc[1])) s--;
          
          // loop spent into [2,3]
          while (s >= 0 && spent[s][0] == cc[0] && spent[s][1] == cc[1] && new Date(spent[s][0], spent[s][1]-1, spent[s][2]) <= today) {
            over[o][2] += parseFloat(spent[s][3] || 0);
            over[o][3] += parseFloat(spent[s][5] || 0);
            s--;
          }
          
          // calculate [5]
          over[o][5] = over[o][2] - over[o][3] - over[o][4];
        }
      }
     
      Over.getRange("A2:F" + Over.getMaxRows()).clear();
      Over.getRange("I2:I" + Over.getMaxRows()).clear();
      
      var start = (((over[0][0] - begining.getFullYear()) * 12) + 2);
      Over.getRange("A" + start + ":F" + (start + over.length - 1)).setValues(over);

      Over.getRange("A" + start + ":B" + (start + over.length - 1)).setNumberFormat("00");
      Over.getRange("C" + start + ":F" + (start + over.length - 1)).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
    }

    function overYearly() {
      var future = Future.getRange("A2:E" + Future.getMaxRows()).getValues();
      var over = [];
      // loop future output
      for (var f = 0; f < future.length && future[f][1] != "";) {
        var o = over.length;
        over[o] = [];
        over[o][0] = parseFloat(future[f][0] || 0) + 1;
        over[o][1] = 0.0;

        // while its same year sum up
        while (f < future.length && future[f][0] != "" && future[f][0] < over[o][0]) {
          over[o][1] += parseFloat(future[f][3] || 0);
          f++;
        }

        // while its before month sum up
        while (f < future.length && future[f][0] != "" && future[f][1] != "" && future[f][1] < begining.getMonth() + 1 && future[f][0] == over[o][0]) {
          over[o][1] += parseFloat(future[f][3] || 0);
          f++;
        }

        // loop back to next year
      }
      
      if (year > begining.getFullYear()+1)
        Over.showRows(2, ((year - begining.getFullYear())*12) + 1);
     
      // output merged cells, formulas etc
      for (var i = 0; i < over.length; i++) {
        if (i == over.length - 1 && over[i][1] == 0)
          continue;
        var s = (((over[i][0] - begining.getFullYear()-1) * 12) + 2);
        var e = s + 11;
        
        Over.getRange("A" + s + ":A" + s).setValue((over[i][0] - 1));
        Over.getRange("A" + e + ":A" + e).setValue(over[i][0] - (begining.getMonth() > 0 ? 0 : 1));
        Over.getRange("H" + s + ":H" + e).mergeVertically();
        Over.getRange("H" + s + ":H" + s).setFormula("=SUM(F" + s + ":F" + e + ")");
        Over.getRange("H" + s + ":H" + s).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
        Over.getRange("I" + s + ":I" + e).mergeVertically();
        Over.getRange("I" + s + ":I" + s).setValue(over[i][1]);
        Over.getRange("I" + s + ":I" + s).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
        Over.getRange("K" + s + ":K" + e).mergeVertically();
        Over.getRange("K" + s + ":K" + s).setFormula("=IF(TODAY()-DATE(A" + s + ","+(begining.getMonth() + 1)+",1)<1,52,IF(TODAY()-DATE(A" + s + ","+(begining.getMonth() + 1)+",1)>366,52,(TODAY()-DATE(A" + s + ","+(begining.getMonth() + 1)+",1))/7))");
        Over.getRange("K" + s + ":K" + s).setNumberFormat('00');
        Over.getRange("L" + s + ":L" + e).mergeVertically();
        Over.getRange("L" + s + ":L" + s).setFormula("=H" + s + "/K" + s + "");
        Over.getRange("L" + s + ":L" + s).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
      }
     
      // hide previous years for now
      if (year > begining.getFullYear()+1)
        Over.hideRows(2, ((year - begining.getFullYear()-1)*12));
    }

    function nowData(priority) {
      var future = Future.getRange("A2:G" +  + Future.getMaxRows()).getValues();
     
      // find today and before begining
      var f = 0, april = 1;
      while (f < future.length && new Date(future[f][0], future[f][1]-1, future[f][2]) <= today) {
        f++;
        if (f >= future.length || future[f][0] < (year - 1) || (future[f][1] < begining.getMonth() + 1 && future[f][0] == (year - 1)))
          april++;
      }
     
      var nfuture = [];
     
      // find last 10 items incase they haven passed yet
      var last10 = (f - 10) > 0 ? (f - 10) : 0;
      var x = last10 < april ? last10 : april;
      for (var p = x; p < f; p++) {
        nfuture[nfuture.length] = future[p];
      }
     
      // current balance
      var cur = 0.0, blanks = 4;
      if (priority == null) {
        // calc from spent
        cur = Spent.getRange("D1:D1").getValue() + Spent.getRange("D2:D2").getValue() - Spent.getRange("D3:D3").getValue();
        while (Spent.getRange("A" + blanks + ":A" + blanks).getValue() == "" && blanks < Spent.getMaxRows()) {
          cur -= parseFloat(Spent.getRange("D" + blanks + ":D" + blanks).getValue() || 0);
          blanks++;
        }
      } else {
        // calc from current month only
        blanks = nfuture.length - 1;
        while (blanks >= 0 && nfuture[blanks][4] != "") {
          cur += parseFloat(nfuture[blanks][3] || 0);
          blanks--;
        }
      }

      var minim = [], mincr = cur, minyr = year;
      //today.setHours(0, 0, 0, 0);
      nfuture[nfuture.length] = [today.getFullYear(),today.getMonth() + 1,today.getDate(),'','',today,cur];
     
      // find all future balance based off current
      for (var p = f; p < future.length && future[p][0] != ""; p++) {
        var n = nfuture.length;
        nfuture[n] = future[p];
        nfuture[n][5] = new Date(nfuture[n][0], nfuture[n][1]-1, nfuture[n][2]);
        if (nfuture[n][4] == "") {
          if (priority != null) {
            cur = 0.0;
            nfuture[n][5] = "";
          }
        } else
          cur += parseFloat(nfuture[n][3] || 0);
        nfuture[n][6] = cur;
        if (nfuture[n][0] < minyr || (nfuture[n][1] < begining.getMonth() + 1 && nfuture[n][0] == minyr)) {
          if (cur < mincr)
            mincr = cur;
        } else {
          minim.push([mincr, minyr]);
          mincr = cur;
          minyr = nfuture[n][0] + 1;
        }
      }
      minim.push([mincr, minyr]);
     
      // output low points to over if not in Fn sheet
      if (priority == null) {
        Over.getRange("J2:J" + Over.getMaxRows()).clear();
        
        var r = ((year - begining.getFullYear()-1) * 12) + 2;
        for (var m in minim) {
          Over.getRange("A" + r + ":A" + r).setValue((minim[m][1] - 1));
          Over.getRange("A" + (r + 11) + ":A" + (r + 11)).setValue(minim[m][1] - (begining.getMonth() > 0 ? 0 : 1));
          
          Over.getRange("J" + r + ":J" + (r + 11)).mergeVertically();
          Over.getRange("J" + r + ":J" + r).setValue(minim[m][0]);
          Over.getRange("J" + r + ":J" + r).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
          r += 12;
        }
      }
     
      Future.getRange("A2:G" + Future.getMaxRows()).clear();
      Future.getRange("A2:G" + (nfuture.length + 1)).setValues(nfuture);
     
      Future.getRange("A2:C" + (nfuture.length + 1)).setNumberFormat("00");
      Future.getRange("D2:D" + (nfuture.length + 1)).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
      Future.getRange("G2:G" + (nfuture.length + 1)).setNumberFormat(pound + "#,##0.00;[Red]-" + pound + "#,##0.00");
      Future.getRange("F2:F" + (nfuture.length + 1)).setNumberFormat("yyyy-mm-dd");
      
      if (f - x -10 >= 2)
        Future.hideRows(2, f - x - 10);
    }

    function timeout(ms) {
      return new Promise(resolve => setTimeout(resolve, ms || 10));
    }

    function calc(sub) {
      // 0
      // All
    
      // 1
      // Spent.getRange('F4:F' + row).recalc();
      // Spent.getRange('H4:M' + row).recalc();
      // Spent.getRange('O4:S' + row).recalc();
      // Spent.getRange('H2:M2').recalc();
      // Spent.getRange('O2:S2').recalc();
      // Over.getRange('L1:L' + Over.getMaxRows()).recalc();
      // Plan.getRange('J1:J' + Plan.getMaxRows()).recalc();

      // 2
      // Over.getRange('H1:H' + Over.getMaxRows()).recalc();
      // Over.getRange('K1:K' + Over.getMaxRows()).recalc();
      // Over.getRange('L1:L' + Over.getMaxRows()).recalc();
      // Plan.getRange('J1:J' + Plan.getMaxRows()).recalc();

      // 4
      // Over.getRange('H1:H' + Over.getMaxRows()).recalc();
      // Over.getRange('L1:L' + Over.getMaxRows()).recalc();
      // Plan.getRange('J1:J' + Plan.getMaxRows()).recalc();
      // Plan.getRange('M1:N' + Plan.getMaxRows()).recalc();

      XLSX_CALC(workbook);
    }
    
    function sheetConfig(sheetName) {
      var s = workbook.Sheets[sheetName];

      s.getMaxRows = function() {
        try {
          return parseInt(s['!ref'].match(/[0-9]*$/)[0]);
        } catch (e) {
          return 64000;
        }
      }

      s.getRange = function (r) {
        r = r.match(/([A-Z]+)([0-9]+):*([A-Z]*)([0-9]*)/);
        r = [r[1],parseInt(r[2]),r[3] || r[1],parseInt(r[4] || r[2])];
        var r0 = r[0];

        function nextChar(c) {
          return XLSX.utils.encode_col(XLSX.utils.decode_col(c) + 1);
        }

        function getter(field) {
          var ret = [];
          while (r[3] >= r[1]) {
            var p =[];
            while(('0000'+r[2]).slice(-5) >= ('0000'+r[0]).slice(-5)) {
             try {
              var o = s[r[0]+r[1]] || {};
              if (o.t == 'e')
                p.push(null);
              else if (o[field])
                p.push(o[field]);
              else
                p.push(field == 'f' ? null : o.t == 'n' ? 0.0 : o.t == 'd' ? null : '');
             } catch (e) {
              p.push(null);
             }
             r[0] = nextChar(r[0]);
            }
            ret.push(p);
            r[1]++;
            r[0]=r0;
          }
          return ret;
        }

        function setter(field,v) {
          if (s.getMaxRows() < r[3])
            s['!ref'] = s['!ref'].replace(/[0-9]*$/, r[3]);

          var a=0,b,formula_ref = {},cells = [];
          while (r[3] >= r[1]) {
            b = 0;
            while(('0000'+r[2]).slice(-5) >= ('0000'+r[0]).slice(-5)) {
             var o = r[0]+r[1]
             try {
              if (!s[o])
                s[o] = {};

              if (field == 'c') {
                var formula = formula_ref[sheetName + '!' + o] = {
                  formula_ref: formula_ref,
                  wb: workbook,
                  sheet: s,
                  sheet_name: sheetName,
                  cell: s[o],
                  name: o,
                  status: 'new',
                  exec_formula: (v||{}).exec_formula
                };
                cells.push(formula);
              } else if (field == 'w') {
                s[o].z = v;
                if (s[o].v && v == '00')
                  s[o].w = (s[o].v < 10 ? '0' : '') + s[o].v;
                else if (s[o].v && v == 'yyyy-mm-dd')
                  s[o].w = (new Date(s[o].v)).toJSON().substring(0,10);
                else if (s[o].v && v.indexOf(pound) >= 0)
                  s[o].w = (s[o].v < 0 ? "-" : "") + pound + parseFloat(s[o].v || 0).toFixed(2);
                else
                  s[o].w = XLSX.SSF.format(v,s[o].v)
              } else if (field == null || !v[a] || !v[a][b]) {
                delete s[o].v;
                delete s[o].f;
                delete s[o].w;
              } else if (field == 'v') {
                s[o].t = typeof v[a][b] == 'number' ? 'n' : typeof v[a][b] == 'object' ? 'd' : 't';
                s[o].v = v[a][b];
                s[o].w = v[a][b].toString();
              } else if (field == 'f') {
                // TODO: this is a dirty hack for what is needed specifically not actual fix
                s[o].f = v[a][b] ? v[a][b]
                  .replace(/(\$)([A-Z]+)3/g, '$1$2' + r[1])
                  .replace(/^=/,'')
                : null;
                s[o].t = v[a][b] ? 's' : 't';
                s[o].v = '';
                s[o].w = '';
              }
             } catch (e) {}
             r[0] = nextChar(r[0]);
             b++;
            }
            r[1]++;
            r[0]=r0;
            a++;
          }
          return cells;
        }

        return {
          getValue: function(){
            return getter('v')[0][0];
          },
          setValue: function(v) {
            setter('v',[[v]]);
          },
          getValues: function() {
            return getter('v');
          },
          setValues: function(v) {
            setter('v',v);
          },
          clear: function () {
            setter(null,null);
          },
          getFormula: function(){
            return getter('f')[0][0];
          },
          setFormula: function(v) {
            setter('f',[[v]]);
          },
          getFormulasR1C1: function() {
            return getter('f');
          },
          setFormulasR1C1: function(v) {
            setter('f',v);
          },
          setNumberFormat: function(f) {
            setter('w',f.replace(pound,'"' + pound + '"').replace(pound,'"' + pound + '"'));
          },
          mergeVertically: function() {
            // TODO: not needed as clear doesnt unmerge but will be needed for new years
          },
          sort: function(p) {
            // TODO: not done as little benefit for large complication
          },
          recalc: function () {
            var c = XLSX_CALC.calculator(workbook);
            var cells = setter('c',c);
            for (var i in cells)
              c.exec_formula(cells[i]);
            c.execute();
          }
        }
      }

      function rowsSet(b,e,v,t) {
        s['!rows'] = s['!rows'] || {};
        b--;
        while (b <= e) {
          s['!rows'][b] = s['!rows'][b] || {};
          s['!rows'][b][t] = v;
          b++;
        }
      }

      s.hideRows = function(b,e) {
        rowsSet(b,e,true,'hidden');
      }
      s.showRows = function(b,e) {
        rowsSet(b,e,false,'hidden');
      }
      s.fixHeight = function(b,e) {
        rowsSet(b,e,20,'hpx');
      }
    }

    // should be on ready
    setTimeout(function () {
      XLSX_CALC.import_functions({
        'FIND': function (a,b,c) {
          return (b || '').toString().indexOf((a || '').toString(), parseInt(c || 0));
        },
        'LOWER': function (a) {
          return (a || '').toString().toLowerCase();
        },
        'ISERROR': function (a) {
          return a == -1;
        },
        'DATE': function (y,m,d) {
          return new Date(parseInt(y),parseInt(m)-1,parseInt(d),0,0,0,0);
        },
        'NOT': function (a) {
          return !a;
        },
        'TODAY': function () {
          var t = new Date();
          t.setHours(0,0,0,0);
          return t;
        }
      }, {override: true});
    },250);
  </script>
</body>
</html>
